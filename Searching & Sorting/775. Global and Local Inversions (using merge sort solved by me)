class Solution {
    public int merge(int[] nums,int[] temp,int start,int mid,int end)
    {
        int i=start;
        int k=start;
        int j=mid+1;

        int count=0;

        while(i<=mid && j<=end)
        {
            if(nums[i]<=nums[j])
            {
                temp[k++]=nums[i++];
            }
            else{              
                temp[k++]=nums[j++];
                count=count+mid-i+1;
            }
        }

        while(i<=mid)
        {
            temp[k++]=nums[i++];
        }

        while(j<=end)
        {
            temp[k++]=nums[j++];
        }

        while(start<=end)
        {
            nums[start]=temp[start];
            start++;
        }

        return count;
    }
    public int mergeSort(int[] nums,int[] temp,int start,int end)
    {
        if(start>=end)
        {
            return 0;
        }

        int mid=start+(end-start)/2;
        int count=0;

        count+=mergeSort(nums,temp,start,mid);
        count+=mergeSort(nums,temp,mid+1,end);

        count+=merge(nums,temp,start,mid,end);

        return count;
    }
    public boolean isIdealPermutation(int[] nums) {
        int[] temp=new int[nums.length];

        int local=0;

        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i]>nums[i+1])
            {
                local++;
            }
        }
        int global=mergeSort(nums,temp,0,nums.length-1);

        if(local==global)
        {
            return true;
        }

        return false;
    }
}
