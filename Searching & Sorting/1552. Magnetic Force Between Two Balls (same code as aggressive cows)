class Solution {
    public boolean isPossible(int[] positions,int m,int distance)
    {
        int count=1;
        int current=positions[0];

        for(int i=1;i<positions.length;i++)
        {
            if(Math.abs(current-positions[i])>=distance)
            {
                count++;
                current=positions[i];

                if(count==m)
                {
                    return true;
                }
            }
        }

        return false;
    }
    public int BinarySearch(int[] positions,int n,int m,int start,int end)
    {
        int mid=start+(end-start)/2;

        int ans=-1;

        while(start<=end)
        {
            if(isPossible(positions,m,mid))
            {
                ans=mid;
                start=mid+1;
            }
            else{
                end=mid-1;
            }

            mid=start+(end-start)/2;
        }
        return ans;
    }

    public int maxDistance(int[] position, int m) {
        int maximum=Integer.MIN_VALUE;
        Arrays.sort(position);
        
        for(int i=0;i<position.length;i++)
        {
            if(position[i]>maximum)
            {
                maximum=position[i];
            }
        }

        return BinarySearch(position,position.length,m,0,maximum);

    }
}
