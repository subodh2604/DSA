//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String input_line1[] = read.readLine().trim().split("\\s+");
            int k = Integer.parseInt(input_line1[0]);
            int n = Integer.parseInt(input_line1[1]);
            String input_line[] = read.readLine().trim().split("\\s+");
            int arr[]= new int[n];
            for(int i = 0; i < n; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            
            Solution ob = new Solution();
            System.out.println(ob.minTime(arr,n,k));
        }
    }
}


// } Driver Code Ends


//User function Template for Java

 class Solution{
     public static boolean isPossible(int[] A,int N,long students,long pages)
    {
        long sum=0;
        long count=0;
        
        for(int i=0;i<N;i++)
        {
            if(sum+A[i]>pages)
            {
                count++;
                sum=A[i];
                
                if(A[i]>pages)
                {
                    return false;
                }
            }
            else{
                sum+=A[i];
            }
        }
        
        if(count<students)
        {
            return true;
        }
        
        return false;
    }
    
    public static long BinarySearch(int[] A,int N,int M,long start,long end)
    {
        long mid=start+(end-start)/2;
        long ans=-1;
        
        while(start<=end)
        {
            if(isPossible(A,N,M,mid))
            {
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
            mid=start+(end-start)/2;
        }
        return ans;
    }
    static long minTime(int[] A,int n,int k){

        
        long sum=0;
        long minimum=Integer.MAX_VALUE;
        for(int i=0;i<A.length;i++)
        {
            sum+=A[i];
            
            if(A[i]<minimum)
            {
                minimum=A[i];
            }
        }
        
        return BinarySearch(A,n,k,minimum,sum);
    }
}


