class Solution {
    public int maxSubArrayHelper(int[] nums,int start,int end)
    {
        if(start==end)
        {
            return nums[start];
        }
        
        int mid=start+(end-start)/2;

        int maxLeftSum=maxSubArrayHelper(nums,start,mid);
        int maxRightSum=maxSubArrayHelper(nums,mid+1,end);

        int maxLeftBorder=Integer.MIN_VALUE;
        int maxRightBorder=Integer.MIN_VALUE;

        int leftBorderSum=0;
        int rightBorderSum=0;

        for(int i=mid;i>=start;i--)
        {
            leftBorderSum+=nums[i];
            if(leftBorderSum>maxLeftBorder)
            {
                maxLeftBorder=leftBorderSum;
            }
        }

        for(int i=mid+1;i<=end;i++)
        {
            rightBorderSum+=nums[i];
            if(rightBorderSum>maxRightBorder)
            {
                maxRightBorder=rightBorderSum;
            }
        }

        int crossBorderSum=maxLeftBorder+maxRightBorder;

        return Math.max(crossBorderSum,Math.max(maxLeftSum,maxRightSum));
    }
    public int maxSubArray(int[] nums) {
        return maxSubArrayHelper(nums,0,nums.length-1);
    }
}
