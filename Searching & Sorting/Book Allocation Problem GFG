//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int t=sc.nextInt();
		
		while(t-->0)
		{
		    int n=sc.nextInt();
		    int a[]=new int[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        a[i]=sc.nextInt();
		    }
		    int m=sc.nextInt();
		    Solution ob = new Solution();
		    System.out.println(ob.findPages(a,n,m));
		}
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution 
{
    //Function to find minimum number of pages.
    
    public static boolean isPossible(int[] A,int N,int students,int pages)
    {
        int sum=0;
        int count=0;
        
        for(int i=0;i<N;i++)
        {
            if(sum+A[i]>pages)
            {
                count++;
                sum=A[i];
                
                if(A[i]>pages)
                {
                    return false;
                }
            }
            else{
                sum+=A[i];
            }
        }
        
        if(count<students)
        {
            return true;
        }
        
        return false;
    }
    
    public static int BinarySearch(int[] A,int N,int M,int start,int end)
    {
        int mid=start+(end-start)/2;
        int ans=-1;
        
        while(start<=end)
        {
            if(isPossible(A,N,M,mid))
            {
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
            mid=start+(end-start)/2;
        }
        return ans;
    }
    
    public static int findPages(int[] A,int N,int M)
    {
        if(M>N)
        {
            return -1;
        }
        
        int sum=0;
        int minimum=Integer.MAX_VALUE;
        for(int i=0;i<A.length;i++)
        {
            sum+=A[i];
            
            if(A[i]<minimum)
            {
                minimum=A[i];
            }
        }
        
        return BinarySearch(A,N,M,minimum,sum);
    }
};
