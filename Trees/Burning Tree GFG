//{ Driver Code Starts
//Initial Template for Java


import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;

class Node {
	int data;
	Node left;
	Node right;

	Node(int data) {
		this.data = data;
		left = null;
		right = null;
	}
}

class GfG {

	static Node buildTree(String str) {

		if (str.length() == 0 || str.charAt(0) == 'N') {
			return null;
		}

		String ip[] = str.split(" ");
		// Create the root of the tree
		Node root = new Node(Integer.parseInt(ip[0]));
		// Push the root to the queue

		Queue<Node> queue = new LinkedList<>();

		queue.add(root);
		// Starting from the second element

		int i = 1;
		while (queue.size() > 0 && i < ip.length) {

			// Get and remove the front of the queue
			Node currNode = queue.peek();
			queue.remove();

			// Get the current node's value from the string
			String currVal = ip[i];

			// If the left child is not null
			if (!currVal.equals("N")) {

				// Create the left child for the current node
				currNode.left = new Node(Integer.parseInt(currVal));
				// Push it to the queue
				queue.add(currNode.left);
			}

			// For the right child
			i++;
			if (i >= ip.length)
				break;

			currVal = ip[i];

			// If the right child is not null
			if (!currVal.equals("N")) {

				// Create the right child for the current node
				currNode.right = new Node(Integer.parseInt(currVal));

				// Push it to the queue
				queue.add(currNode.right);
			}
			i++;
		}

		return root;
	}

	static void printInorder(Node root) {
		if (root == null)
			return;

		printInorder(root.left);
		System.out.print(root.data + " ");

		printInorder(root.right);
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int t = Integer.parseInt(br.readLine());

		while (t > 0) {
			String s = br.readLine();
			int target = Integer.parseInt(br.readLine());
			Node root = buildTree(s);

			Solution g = new Solution();
			System.out.println(g.minTime(root, target));
			t--;

		}
	}
}



// } Driver Code Ends
class Solution
{
    public static int findBurningTime(Node node,HashMap<Node,Node> parent,HashSet<Node> visited)
    {
        Queue<Node> q=new LinkedList<>();
        
        q.add(node);
        
        int time=0;
        
        visited.add(node);
        
        while(!q.isEmpty())
        {
            int size=q.size();
            boolean isfireSpreaded=false;
            for(int i=0;i<size;i++)
            {
                Node temp=q.poll();
                
                if(!visited.contains(parent.get(temp)) && parent.get(temp).data!=0)
                {
                    visited.add(parent.get(temp));
                    q.add(parent.get(temp));
                    isfireSpreaded=true;
                }
                
                if(temp.left!=null)
                {
                    if(!visited.contains(temp.left))
                    {
                        visited.add(temp.left);
                        q.add(temp.left);
                        isfireSpreaded=true;
                    }
                }
                
                if(temp.right!=null)
                {
                    if(!visited.contains(temp.right))
                    {
                        visited.add(temp.right);
                        q.add(temp.right);
                        isfireSpreaded=true;
                    }
                }
            }
            
            if(isfireSpreaded)
            {
                time++;
            }
            // time++;
        }
        
        return time;
    }
    public static Node fillMap(Node root,HashMap<Node,Node> parent,int target)
    {
       Queue<Node> q=new LinkedList<>();
       q.add(root);
       parent.put(root,new Node(0));
       Node targetNode=null;
       while(!q.isEmpty())
       {
           Node front=q.poll();
           
           if(front.data==target)
           {
               targetNode=front;
           }
           if(front.left!=null)
           {
               parent.put(front.left,front);
               q.add(front.left);
           }
           if(front.right!=null)
           {
               parent.put(front.right,front);
               q.add(front.right);
           }
       }
       
       return targetNode;
    }
    
    public static int minTime(Node root, int target) 
    {
        HashMap<Node,Node> hm=new HashMap<>();
        HashSet<Node> visited=new HashSet<>();
        
        Node targetNode=fillMap(root,hm,target);
        
        return findBurningTime(targetNode,hm,visited);
    }
}
